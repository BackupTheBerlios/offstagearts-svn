<?xml version="1.0" encoding="UTF-8"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:mml="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <title>OffstageArts Administration and Programming</title>

  <chapter>
    <title>Introduction</title>

    <para>OffstageArts is an enterprise arts management system. It integrates
    all aspects of a typical performing arts organization in one place:
    development, marketing, school and ticket sales. For more information,
    see: <uri>http://offstagearts.org</uri>.</para>

    <para>OffstageArts is a Free Software aplication, licensed under the
    GPLv3. All components it uses, along with the devlopment tools needed to
    create it, are also free software. No commercial licenses are required to
    run or develop OffstageArts.</para>

    <para>OffstageArts is implemented as a two-tier client-server database
    application, plus some web-based components. The server runs on the
    PostgreSQL database. The client, meant to be run by organizational staff,
    is at Java Swing application. Portions of OffstageArts --- those used
    directly customers --- are also web-based, written in Ruby.</para>

    <para>Since is build on top of commodity components and protocols, it may
    be deployed in a flexible manner. The database may be accessed over a LAN
    or WAN, and the web server components may be deployed in a variety of
    manners. Technical consulting firms are able to determine and implement
    the best configuration for any particular organization.</para>
  </chapter>

  <chapter>
    <title>Downloading and Compilation</title>

    <section>
      <title>Prerequisites</title>

      <para>The following tools are required to download, compile, edit and
      install OffstageArts. Please download and install each of them on your
      system:</para>

      <orderedlist>
        <listitem>
          <para>A Subversion client. Although it is not free as in freedom, we
          recommend SmartSVN:
          <uri>http://www.syntevo.com/smartsvn/index.html</uri>.</para>
        </listitem>

        <listitem>
          <para>Java JDK version 1.5:
          <uri>http://java.sun.com/javase/downloads/index_jdk5.jsp</uri>.
          <emphasis>OffstageArts does not work with Java
          1.6.</emphasis></para>
        </listitem>

        <listitem>
          <para>NetBeans 6.0 or 6.1: <uri>http://www.netbeans.org/</uri>. As a
          Swing-based application, OffstageArts makes extensive use of the
          visual form builder in NetBeans. Eclipse unfortunately does not have
          a well-developed visual builder.</para>
        </listitem>

        <listitem>
          <para>Apache Maven build tool version 2:
          <uri>http://maven.apache.org/</uri>. We use Maven because of its
          excellent dependency resolution. A command line-based Maven is
          required, in addition to the one built into NetBeans.</para>
        </listitem>

        <listitem>
          <para>This document was created using the DocBook 5+ XML DTD in the
          XMLMind XML editor (Personal Edition):
          <uri>http://www.xmlmind.com/xmleditor/download.shtml</uri>. It is
          also not free as in freedom, but it is an excellent GUI-based
          product.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Configure Software</title>

      <para>After downloading and installing the above tools, it is necessary
      to configure them.</para>

      <orderedlist>
        <listitem>
          <para>Maven:</para>

          <para><orderedlist>
              <listitem>
                <para>Make sure you have Maven installed such that the command
                "mvn" works from your command shell.</para>
              </listitem>
            </orderedlist></para>
        </listitem>

        <listitem>
          <para>NetBeans:</para>

          <orderedlist>
            <listitem>
              <para>Make sure you make available to NetBeans the Java sources
              and Javadoc for your version of the JDK. This will allow
              NetBeans to give context-sensitive documentation help, as well
              as to take you to the source code of Java platform classes when
              you Ctrl-click on them. To integrate Java sources and Javadoc,
              start NetBeans and go to Tools-&gt;Java Platform.</para>
            </listitem>

            <listitem>
              <para>Set up tab sizes: Go to
              Tools-&gt;Options-&gt;Editor-&gt;Indentation. Un-check 'Expand
              Tabs to Spaces." Set "Number of Spaces per Indent" and "Tab
              Size" both to 4.</para>
            </listitem>

            <listitem>
              <para>If you are behind a firewall, configure your HTTP proxy
              via Tools-&gt;Options-&gt;General.</para>
            </listitem>

            <listitem>
              <para>Get the Maven Plug-in: Go to
              Tools-&gt;Plugins-&gt;Available Plugins. If your HTTP proxy
              settings are not set right, you will see a blank screen. Once
              you see something, make a checkmark by "Maven" and click the
              "Install" button on the lower-left. Follow instructions.</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>SmartSVN:</para>

          <orderedlist>
            <listitem>
              <para>Add the source code repositories to your system.</para>

              <orderedlist>
                <listitem>
                  <para>Repository-&gt;Mange Profiles-&gt;Add.</para>
                </listitem>

                <listitem>
                  <para>Click on "Enter SVN URL".</para>
                </listitem>

                <listitem>
                  <para>Enter
                  <uri>http://svn.berlios.de/svnroot/repos/holyokefw</uri></para>
                </listitem>

                <listitem>
                  <para>Do the same for:
                  <uri>http://svn.berlios.de/svnroot/repos/offstagearts</uri></para>
                </listitem>
              </orderedlist>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Check Out the Source Code</title>

      <para>OffstageArts depends on a large number of independent projects.
      Two of those are downloaded in source code format along with
      OffstageArts; the rest are available as JAR files either from the
      standard Maven repository, or are included in the source trees.</para>

      <para>Three source-based NetBeans/Maven projects are required to compile
      and run OffstageArts. These can be obtained by checking out the
      following source code modules into one directory (say, ~/mvn):</para>

      <orderedlist>
        <listitem>
          <para><filename>trunk/offstagearts</filename> from the offstagearts
          repository.</para>
        </listitem>

        <listitem>
          <para><filename>trunk/holyokefw</filename> from the holyokefw
          repository.</para>
        </listitem>

        <listitem>
          <para><filename>trunk/holyokewiz</filename> from the holyokefw
          repository.</para>
        </listitem>

        <listitem>
          <para><filename>trunk/holyokereports</filename> from the holyokefw
          repository.</para>
        </listitem>

        <listitem>
          <para><filename>trunk/objcobra</filename> from the holyokefw
          repository.</para>
        </listitem>

        <listitem>
          <para><filename>trunk/stringtemplate</filename> from the holyokefw
          repository.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Open the Projects and Install into the Maven Repository</title>

      <para>Once you have downloaded all source code, use File-&gt;Open
      Project on the downloaded project directories. If NetBeans does not
      recognize them as project directories, you might not have your Maven
      option installed. With all three projects open, set offstagearts as the
      main project in NetBeans: right-click on it and choose "Set as Main
      Project."</para>

      <para>Now, run the following commands to install required JAR files into
      your Maven repository. (You may use Cygwin on Windows, or rename the
      install.sh files to Windows .bat files).</para>

      <programlisting>cd ~/mvn/objcobra/lib
sh ./install.bat
cd ~/mvn/holyokefw/lib
sh ./install.bat
cd ~/mvn/offstagearts/lib
sh ./install.bat</programlisting>
    </section>

    <section>
      <title>Add Typed Widgets to NetBeans</title>

      <para>The Holyoke Framework provides a set of <emphasis>typed
      widgets</emphasis> that subclass from standard Swing widgets and allow
      for the easy creation of GUI screens. In order to see the typed widgets
      in the NetBeans visual builder, they must be compiled as a .nbm module
      and loaded into NetBeans. This is accomplished as follows:</para>

      <orderedlist>
        <listitem>
          <para>Clean and compile stringtemplate.</para>
        </listitem>

        <listitem>
          <para>Clean and compile objcobra.</para>
        </listitem>

        <listitem>
          <para>Clean and compile holyokefw.</para>
        </listitem>

        <listitem>
          <para>Right-click on offstagearts in the "Projects" tabe of NetBeans
          and select "Set as Main Project."</para>
        </listitem>

        <listitem>
          <para>Run the project (F6 in NetBeans).</para>
        </listitem>

        <listitem>
          <para>Select <literal>MakeNbm</literal> from the dialog box that
          appears.</para>
        </listitem>

        <listitem>
          <para>When it is done running, you should now have the file
          <filename>~/mvn/holyokefw/target/holyokefw-1.0-SNAPSHOT.nbm</filename>.</para>
        </listitem>

        <listitem>
          <para>In NetBeans, use Tools-&gt;Plugins-&gt;Downloaded. Click on
          the "Add Plugins..." button. Select the .nbm file created above.
          Then click on the "Install" button in the lower left hand
          corner.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Compile and Run OffstageArts</title>

      <para>To do a clean compile of OffstageArts:</para>

      <orderedlist>
        <listitem>
          <para>Clean and compile stringtemplate.</para>
        </listitem>

        <listitem>
          <para>Clean and compile objcobra.</para>
        </listitem>

        <listitem>
          <para>Clean and compile holyokefw.</para>
        </listitem>

        <listitem>
          <para>Clean and compile holyokewiz.</para>
        </listitem>

        <listitem>
          <para>Clean and compile holyokereports.</para>
        </listitem>

        <listitem>
          <para>Clean and compile offstagearts.</para>
        </listitem>

        <listitem>
          <para>Press F6 in NetBeans to run, Ctrl-F5 to debug.</para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter>
    <title>Database Administration</title>

    <para>OffstageArts requires a database hosted on a server running
    PostgreSQL version 8 or higher. When installing your PostgreSQL database
    server for the first time, two configuration files need to be set up
    properly:</para>

    <orderedlist>
      <listitem>
        <para><filename>pg_hba.conf:</filename> This configures how PostgreSQL
        authenticates the various users. The user named "postgres" is the
        superuser for the database system. Depending on your installation
        requirements, you may wish to set up different forms of
        authentication. On a development laptop, it would be normal to use
        "trust" authentication.</para>
      </listitem>

      <listitem>
        <para><filename>postgresql.conf:</filename> The option
        "listen_addresses" in this file determines the IP address of clients
        that will be allowed to connect to PostgreSQL. This should be
        configured to allow connections from any clients that would be running
        OffstageArts.</para>
      </listitem>
    </orderedlist>

    <para>The script <filename>serverscripts/newuser.sh</filename> creates a
    new user and database, ready for OffstageArts; see the script for details
    on command line arguments. A few notes:</para>

    <orderedlist>
      <listitem>
        <para>By convention, we create OffstageArts users and databases in
        PostgreSQL using the same name. Thus, the database "tinytheater" is
        associated with the user "tinytheater."
        <filename>newuser.sh</filename> sfollows these conventions</para>
      </listitem>

      <listitem>
        <para><filename>newuser.sh requires that the postgres user
        authentication be set to "trust." If this is not the case for your
        PostgreSQL, a little bit of modification may be
        necessary</filename></para>
      </listitem>

      <listitem>
        <para>newuser.sh creates essentially a blank database. The
        OffstageArts client fills in the schema as needed.</para>
      </listitem>
    </orderedlist>

    <para>Finally, some people have reported problems with PostgreSQL version
    8.3 with some applications. If you have problems with version 8.3, please
    try 8.2 or 8.1 instead. </para>
  </chapter>

  <chapter>
    <title>Database Schema</title>

    <para>NOTE: This schema is out of date. Tables have been added and
    removed.</para>

    <section>
      <title>Core CRM</title>

      <para><glosslist>
          <glossentry>
            <glossterm>entities</glossterm>

            <glossdef>
              <para>The main table to store each person or organization's
              record.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>persons</glossterm>

            <glossdef>
              <para>Subclasses from entities. This subclassing is obsolete.
              All entities are actually stored in the persons table. The isorg
              column indicates whether or not it is an organization. The
              persons table should be merged into entities.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>groupids, groups</glossterm>

            <glossdef>
              <para>A group is a set of entities, with additional meta-data
              identifying the set. Examples might include the set of students
              enrolled in a particular class, the set of people who attended a
              particular event, or the set of people who are donors.</para>

              <para>Alternately, groups may be seen as a way to annotate
              individual entity records. For example, each phone type (home,
              work, cell, etc) is defined a groupid. Membership in the home
              "group" is used to indicate that someone has a home phone
              number.</para>

              <para>Groups are defined in two tables. The group-wide meta-data
              describing the nature of the group is stored in groupids.
              Membership in the group, along with data attached to each
              entity's membership, is stored in groups.</para>

              <para>All groupings in the database subclass groupids and groups
              in a predictable manner (see below).</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>mailprefids</glossterm>

            <glossdef>
              <para>Meta-data defining mail preferences in entities.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>equeries</glossterm>

            <glossdef>
              <para>Storage for Offstage user-generated queries.</para>
            </glossdef>
          </glossentry>
        </glosslist></para>

      <para>Below are the grouping tables, used to annotate entity
      records:<glosslist>
          <glossentry>
            <glossterm>donationids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>donations</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>eventids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>events</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>flagids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>flags</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>interestids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>interests</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>noteids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>notes</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>phoneids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>phones</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>ticketeventids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>ticketeventsales</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>tickettypes</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>offercodeids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>perftypeids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>venueids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>

    <section>
      <title>Accounting</title>

      <para>OffstageArts is able to keep running accounts for each entity. It
      stores multiple accounts per entity; the account types available are
      defined in actypes.</para>

      <para>Each account consists of a balance record, describing the account
      balance at a point in time, followed by a series of transaction records,
      which change the account. Balance records may be made at any point the
      system feels is convenient. They should be seen as an optimization, so
      that the system does not have to sum all the transaction records from
      the beginning.<glosslist>
          <glossentry>
            <glossterm>acbal</glossterm>

            <glossdef>
              <para>Balances</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>actrans</glossterm>

            <glossdef>
              <para>Transaction superclass</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>actypes</glossterm>

            <glossdef>
              <para>Types of accounts --- School, Tickets, Donations,
              etc.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>tuitiontrans</glossterm>

            <glossdef>
              <para>Term bill transactions placed on the accounts. These
              records are automatically generated by the tuition calculator
              --- and also automatically revised if enrollment information is
              modified.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>adjpayments</glossterm>

            <glossdef>
              <para>Manual adjustments to account --- used only for special
              cases</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>cashpayments</glossterm>

            <glossdef>
              <para>Record of cash payments</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>ccpayments</glossterm>

            <glossdef>
              <para>Record of credit card payments. A little more work needs
              to go into recording the status of credit card payments as they
              move through the validation process.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>checkpayments</glossterm>

            <glossdef>
              <para>Record of check payments</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>ccbatches</glossterm>

            <glossdef>
              <para>For systems in which credit cards are batch processed,
              this indicates the batches in which they were processed.</para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>

    <section>
      <title>School</title>

      <para><glosslist>
          <glossentry>
            <glossterm>termids</glossterm>

            <glossdef>
              <para>Defines the terms the school goes through --- Fall 2008,
              Nutcracker 2007, Summer 2009, etc.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>termtypes</glossterm>

            <glossdef>
              <para>Different kinds of terms --- Fall, Spring, Summer,
              Nutcracker, etc. Annotates termids.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>termduedates</glossterm>

            <glossdef>
              <para>The dates at which different kinds of term bill payments
              are due --- whether they're quarterly, yearly, monthly, etc. The
              codes in this table ('y', 'q1', etc.) are referenced in the Java
              tuition calculation code.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>holidays</glossterm>

            <glossdef>
              <para>Combined with the start and end date of a term in termids,
              the holidays table is used to define a school calendar. This is
              used to automate the filling in of the meetings table.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>courseids</glossterm>

            <glossdef>
              <para>Lists the courses offered on a particular term.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>meetings</glossterm>

            <glossdef>
              <para>Lists all the times a course meets over the course of a
              term.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>enrollments, courseroles</glossterm>

            <glossdef>
              <para>Enrollments associates entities with courses, thus
              enrolling a person in a course. Enrollment in a course can
              involve peole in different roles --- which might include
              student, pianist, or teacher. Thus, it is not just students who
              get enrolled.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>subs</glossterm>

            <glossdef>
              <para>Record of pre-arranged class substitutions --- or viewed
              another way, this table allows students/teachers/pianists to
              enroll (or un-enroll) in a course on a meeting-by-meeting basis.
              The enrollment for any particular meeting is thus defined by
              enrollments table, with overrids from subs.</para>

              <para>An open class program will involve an enrollments table
              with teacher and maybe pianist, but no permanent student
              enrollment. Students will be put in the subs table on a
              per-class basis.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>attendance</glossterm>

            <glossdef>
              <para>Attendance record. Taken automatically or
              semi-automatically from information obtained at front
              desk.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>absences</glossterm>

            <glossdef>
              <para>A record of any unexplained absences noticed by the system
              (as obtained from the attendance table), plus what was done
              about them.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>coursesetids, coursesets</glossterm>

            <glossdef>
              <para>Courses may be grouped into sets, by level. In general, a
              student a particular level (in entities_school) should only be
              enrolled in level-appropriate courses. This information can be
              used to streamline the backoffice interface, and also limit
              options for parents on the web interface.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>gradelevels</glossterm>

            <glossdef>
              <para>Meta-data table describing a number of different grade
              levels. Used in entities_school.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>programids</glossterm>

            <glossdef>
              <para>Meta-data describing the different programs (levels) at
              the school. Eg: Pre-Ballet I, Level IV, etc.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>registrations, regelig</glossterm>

            <glossdef>
              <para>Students are typically allowed to register for a
              particular level (program) only after an audition. This table
              records their eligibility, thus allowing automated school
              registration, post-audition. Not yet used.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>termregs</glossterm>

            <glossdef>
              <para>Before a student can be enrolled in courses, that student
              must be registered for a term. This table includes columns
              specific to a student on a per-term basis.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>payertermregs</glossterm>

            <glossdef>
              <para>Per-term information for the payer of a student.</para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>

    <section>
      <title>Resources</title>

      <para>OffstageArts maintains a system of versioned resource in the
      database. These resources consist of report templates, and even the
      database schema itself. Resources have a version number (corresponding
      with the SVN version number of the code), as well as an overion number
      (which corresponds to a term or season, for resources that get their
      text changed every term or season.)</para>

      <glosslist>
        <glossentry>
          <glossterm>resourceids</glossterm>

          <glossdef>
            <para>Names of the various resources the system keeps (versioned)
            track of.</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>resources</glossterm>

          <glossdef>
            <para>The actual resources, as well as versioning information
            (both by version and oversion).</para>
          </glossdef>
        </glossentry>
      </glosslist>
    </section>

    <section>
      <title>DB Administration</title>

      <para><glosslist>
          <glossentry>
            <glossterm>accounts (web users)</glossterm>

            <glossdef>
              <para>Information that will allow entities (typically parents)
              to log in via the web. Not yet used</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>dblogins, dblogingroups, dblogingroupids</glossterm>

            <glossdef>
              <para>In theory, OffstageArts client knows which user is using
              the system, based on Macintosh/Windows logins. It does not seem
              to work on Windows, and needs further testing.</para>

              <para>This information can be used to restrict end-user access
              to certain OffstageArts functions. Currently, all functions are
              available to everyone.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>dups</glossterm>

            <glossdef>
              <para>The duplicate finder program stores its results
              here.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>mergelog</glossterm>

            <glossdef>
              <para>A log of merged records in pursuit of elimination of
              duplicates. Also indicates records that the duplicate finder
              thinks are duplicates, but actually are not --- telling the
              system to ignore those particular duplicates in the
              future.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>querylog, querylogcols</glossterm>

            <glossdef>
              <para>A log of all insert and update queries to the core CRM
              tables (and maybe some others). It includes most changes to the
              database, but not all.</para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>

    <section>
      <title>Misc.</title>

      <para><glosslist>
          <glossentry>
            <glossterm>daysofweek</glossterm>

            <glossdef>
              <para>Conversions between days of the week in various forms.
              Shortcut to allow this table lookup via an SQL join.</para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>locations</glossterm>

            <glossdef>
              <para>Studio or Venue locations. Not sure if this is being used
              anywhere.</para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>

    <section>
      <title>Obsolete</title>

      <para><glosslist>
          <glossentry>
            <glossterm>coursedeps</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>classes</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>classids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>dtgroupids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>dtgroups</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>invoiceids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>invoices</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>mailingids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>mailings</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>organizations</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>paymentallocs</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>paymentids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>paymenttypeids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>pplanids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>pplaninvoiceids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>pplantypeids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>relprimarytypes</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>status</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>statusids</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>termregs_old</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>

          <glossentry>
            <glossterm>termids_old</glossterm>

            <glossdef>
              <para></para>
            </glossdef>
          </glossentry>
        </glosslist></para>
    </section>
  </chapter>
</book>