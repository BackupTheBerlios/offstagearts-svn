/*
 * OCDiscPanel.java
 *
 * Created on June 10, 2008, 9:03 AM
 */

package offstage.openclass;

import citibob.app.App;
import citibob.jschema.IntsKeyedDbModel;
import citibob.jschema.MultiDbModel;
import citibob.jschema.PivotSchemaBuf;
import citibob.jschema.SchemaBuf;
import citibob.jschema.SchemaBufDbModel;
import citibob.sql.RsTasklet2;
import citibob.sql.SqlRun;
import citibob.sql.UpdTasklet2;
import citibob.sql.pgsql.SqlInteger;
import citibob.swing.table.ExtPivotTableModel;
import citibob.task.SqlTask;
import citibob.text.FormatSFormat;
import citibob.text.KeyedSFormat;
import citibob.text.SFormat;
import citibob.types.KeyedModel;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import offstage.FrontApp;

/**
 *
 * @author  citibob
 */
public class OCDiscPanel extends javax.swing.JPanel {
	
//Integer TeacherID;		// Teacher for which this shows discounts (or null for studio discounts)

App app;
	
SchemaBufDbModel discDm;
SchemaBufDbModel discAmtDm;
MultiDbModel pivotDm;
ExtPivotTableModel pivotTm;

	/** Creates new form OCDiscPanel */
	public OCDiscPanel() {
		initComponents();
	}
	
	Integer getTeacherID(){
		return (Integer)discDm.getKey();
	}
	public void initRuntime(SqlRun str, final FrontApp xapp, Integer TeacherID)
	{
		this.app = xapp;
//		this.TeacherID = TeacherID;
		
//		String[] keyFields = ;
		// Main discount table
		discDm = new IntsKeyedDbModel(app.getSchema("ocdiscids"),
			new String[] {"teacherid"},
			false, app.dbChange());
		discDm.setKey(TeacherID);

		// Discount amount table --- to be pivoted
		discAmtDm = new SchemaBufDbModel(new SchemaBuf(app.getSchema("ocdiscidsamt")),
			"ocdiscidsamt", app.dbChange()) {
		public void doSelect(SqlRun str) {
			Integer TeacherID = getTeacherID();
			String sql =
				" select amt.*" +
				" from ocdiscidsamt amt, ocdiscids ids" +
				" where ids.ocdiscid = amt.ocdiscid" +
				(TeacherID == null ?
					" and teacherid is null" :
					" and teacherid = " + SqlInteger.sql(TeacherID));
			getSchemaBuf().setRows(str, sql);
		}};
//		discAmtDm = new SqlBufDbModel(str, app,
//			new String[] {"ocdiscidsamt"},
//			new String[] {"ocdiscid", "ocdisccatid"},
//			new String[] {"ocdiscidsamt"}) {
//		public String getSelectSql(boolean proto) {
//			Integer TeacherID = getTeacherID();
//			return
//				" select amt.*" +
//				" from ocdiscidsamt amt, ocdiscids ids" +
//				" where ids.ocdiscid = amt.ocdiscid" +
//				(TeacherID == null ?
//					" and teacherid is null" :
//					" and teacherid = " + SqlInteger.sql(TeacherID)) +
//				(proto ? " and 1=0" : "");
//		}};

		str.execUpdate(new UpdTasklet2() {
		public void run(SqlRun str) {
			// Set up pivot --- discAmtDm should be before discDm so PivotSchemaBuf works right
			pivotDm = new MultiDbModel(discAmtDm, discDm);
				// Need to make own class here, to remove null values from data table when saving
			KeyedModel discCatKm = app.schemaSet().getKeyedModel("ocdiscidsamt", "ocdisccatid");
			ArrayList pivotVals = new ArrayList();
			for (int i=0; i<discCatKm.size(); ++i) {
				Integer val = (Integer)discCatKm.getKey(i);
				if (val.intValue() > 0) pivotVals.add(val);
			}
			PivotSchemaBuf pivotSb = new PivotSchemaBuf(
				discDm.getSchemaBuf(), discAmtDm.getSchemaBuf(),
				new String[] {"ocdiscid"},
				"ocdisccatid", "pct",
				pivotVals, new KeyedSFormat(discCatKm));

			// Now put it together as one table that we can display
			pivotTm = new ExtPivotTableModel(discDm.getSchemaBuf(), pivotSb);

			// Set the model in Swing
			pivotTm.setModelU(discounts,
				new String[] {"Status", "Name"},
				new String[] {"__status__", "name"},
				null,
				new boolean[] {false,true}, true,
				app.swingerMap());
			pivotTm.setPivotValFormat(discounts,
				new FormatSFormat(NumberFormat.getPercentInstance(), "", SFormat.RIGHT));
//			discounts.setModelU(pivotTm, app.swingerMap());
			pivotDm.doSelect(str);
		}});
		// --------------------------------------------------------
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        discounts = new citibob.swing.JTypeColTable();
        jToolBar1 = new javax.swing.JToolBar();
        bSave = new javax.swing.JButton();
        bUndo = new javax.swing.JButton();
        bAdd = new javax.swing.JButton();
        bRemove = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        discounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(discounts);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);

        bSave.setText("Save");
        bSave.setFocusable(false);
        bSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(bSave);

        bUndo.setText("Undo");
        bUndo.setFocusable(false);
        bUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bUndoActionPerformed(evt);
            }
        });
        jToolBar1.add(bUndo);

        bAdd.setText("Add");
        bAdd.setFocusable(false);
        bAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });
        jToolBar1.add(bAdd);

        bRemove.setText("Remove");
        bRemove.setFocusable(false);
        bRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bRemove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveActionPerformed(evt);
            }
        });
        jToolBar1.add(bRemove);

        add(jToolBar1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

	private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
		app.guiRun().run(OCDiscPanel.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			pivotDm.doUpdate(str);
			str.execSql("insert into ocdiscids (teacherid) values ("
				+ SqlInteger.sql(getTeacherID()) + ")");
			pivotDm.doSelect(str);
		}});
}//GEN-LAST:event_bAddActionPerformed

	private void bRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveActionPerformed
		app.guiRun().run(OCDiscPanel.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			// Figure out which discount was clicked on
			final int row = discounts.getSelectedRow();
			if (row < 0) return;
			final int ocdiscid = (Integer)pivotTm.getValueAt(row, "ocdiscid");
			
			// See how much it's used
			String sql =
				" select count(*) from ocdiscs where ocdiscid = " + ocdiscid;
			str.execSql(sql, new RsTasklet2() {
			public void run(SqlRun str, ResultSet rs) throws SQLException {
				rs.next();
				int count = rs.getInt(1);
				
				// Warn user if it's in use
				if (count > 0) {
					String name = (String)pivotTm.getValueAt(row, "name");
					String msg =
						"The discount code '" + name + "' is being used by " + count + " students.\n" +
						"Are you sure you wish to remove it and eliminate the students' participation\n" +
						"in the discount?";
					int res = JOptionPane.showConfirmDialog(OCDiscPanel.this, msg,
						"Remove Discount Code?", JOptionPane.YES_NO_OPTION);
					if (res != JOptionPane.YES_OPTION) return;
				}
				
				// Remove it --- to be flushed later
				discDm.getSchemaBuf().deleteRow(row);
//				str.execSql("delete from ocdiscids where ocdiscid = " + ocdiscid);
				
			}});
		}});
		// TODO add your handling code here:
	}//GEN-LAST:event_bRemoveActionPerformed

	private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
		app.guiRun().run(OCDiscPanel.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			pivotDm.doUpdate(str);
			pivotDm.doSelect(str);
		}});
		// TODO add your handling code here:
	}//GEN-LAST:event_bSaveActionPerformed

		private void bUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bUndoActionPerformed
		app.guiRun().run(OCDiscPanel.this, new SqlTask() {
		public void run(SqlRun str) throws Exception {
			pivotDm.doSelect(str);
		}});
			// TODO add your handling code here:
		}//GEN-LAST:event_bUndoActionPerformed
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bRemove;
    private javax.swing.JButton bSave;
    private javax.swing.JButton bUndo;
    private citibob.swing.JTypeColTable discounts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
	
}
